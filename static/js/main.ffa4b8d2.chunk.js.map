{"version":3,"sources":["componentes/popupStyles.js","componentes/Confirmados.jsx","componentes/Mapa.jsx","componentes/Menu.jsx","componentes/Sidebar.jsx","App.js","serviceWorker.js","index.js"],"names":["popupHead","fontWeight","fontSize","color","width","textDecoration","okText","textInfectados","textFallecidos","textRecuperados","fetcher","fetch","then","response","json","icon","Icon","iconUrl","iconSize","Confirmados","props","useSwr","data","error","casosConfirmados","React","useState","casoConfirmadoActivo","setCasoConfirmadoActivo","map","casoConfirmado","index","location","lat","lng","Marker","key","position","onmouseover","Popup","className","style","countryregion","provincestate","toLocaleString","confirmed","deaths","recovered","Mapa","Map","center","zoom","minZoom","maxZoom","TileLayer","url","attribution","NavbarPage","state","isOpen","toggleCollapse","setState","dark","expand","id","this","navbar","right","Component","Sidebar","dataIsLoad","result","Fragment","marginTop","value","App","Menu","fluid","xl","lg","md","xs","Boolean","window","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.ffa4b8d2.chunk.js","sourcesContent":["let text_size= \"2.2em\"\n\nconst popupHead = {\n    fontWeight: \"bold\",\n    fontSize: \"22px\",\n    color: \"#bbb\",\n    width: \"100%\",\n    textDecoration: \"underline gray\"\n};\n  \nconst okText = {\n    fontSize: \"15px\",\n    color: \"#ccc\"\n};\n\nconst textInfectados = {\n    color: \"rgb(243,156,18)\",\n    fontSize: text_size\n}\n\nconst textFallecidos = {\n    color: \"rgb(192,57,43)\",\n    fontSize: text_size\n}\n\nconst textRecuperados = {\n    color: \"rgb(39,174,96)\",\n    fontSize: text_size\n}\n  \nexport { popupHead, okText, textInfectados, textFallecidos, textRecuperados };","import React from 'react'\nimport { Marker, Popup } from 'react-leaflet'\nimport useSwr from 'swr'\nimport { Icon } from 'leaflet'\nimport { popupHead, okText } from \"./popupStyles\";\n\nconst URL = 'https://wuhan-coronavirus-api.laeyoung.endpoint.ainize.ai/jhu-edu/latest'\n// const URL = 'https://covid19.mathdro.id/api/confirmed'\n// const URL2= 'https://2019ncov-api.now.sh/api/cases'\n\nconst fetcher = (...args) => fetch(...args)\n    .then( response => response.json())\n\nconst icon = new Icon({\n    iconUrl: '/circulo.svg',\n    iconSize: [10,10]\n})\n\nconst Confirmados = (props) =>{\n    const { data , error } = useSwr( URL, fetcher);\n    const casosConfirmados = ( data && !error)? data : [];\n    const [ casoConfirmadoActivo, setCasoConfirmadoActivo] = React.useState(null)\n    return(\n        <div>\n            {\n                casosConfirmados.map( (casoConfirmado, index) => {   \n                        if(casoConfirmado.location.lat !== null && casoConfirmado.location.lng !== null){\n                            return(    \n                                <Marker \n                                    key = { index }\n                                    position = { [casoConfirmado.location.lat, casoConfirmado.location.lng]}\n                                    icon = {icon}\n                                    onmouseover = { () => {\n                                        setCasoConfirmadoActivo(null);\n                                        setCasoConfirmadoActivo(casoConfirmado)\n                                    }}\n                                />\n                            )\n                        }else{\n                            return null\n                        }\n                    }   \n                )\n            }\n            {casoConfirmadoActivo &&\n                <Popup \n                    className=\"request-popup\"\n                    position = {[casoConfirmadoActivo.location.lat, casoConfirmadoActivo.location.lng]}\n                >\n                    <h2 style={popupHead}>{casoConfirmadoActivo.countryregion}</h2>\n                    <h4 style={okText}>{ casoConfirmadoActivo.provincestate ? casoConfirmadoActivo.provincestate.toLocaleString() : null }</h4>\n                    <h4 style={okText}>Infectados: { casoConfirmadoActivo.confirmed ? casoConfirmadoActivo.confirmed.toLocaleString() : 0 }</h4>\n                    <h4 style={okText}>Fallecidos: {casoConfirmadoActivo.deaths ? casoConfirmadoActivo.deaths.toLocaleString() : 0 }</h4>\n                    <h4 style={okText}>Recuperados: {casoConfirmadoActivo.recovered ? casoConfirmadoActivo.recovered.toLocaleString() : 0 }</h4>\n                </Popup>\n            } \n        </div>\n        \n    )\n}\nexport default Confirmados;","import React from 'react'\nimport { Map, TileLayer} from 'react-leaflet'\nimport '../App.css'\nimport Confirmados from './Confirmados'\n\nconst Mapa = () => {\n    return(\n        <Map center={[20, 0]} zoom={3} minZoom={3} maxZoom={8}>\n            <TileLayer\n                url=\"https://tiles.stadiamaps.com/tiles/alidade_smooth_dark/{z}/{x}/{y}{r}.png\"\n                // </Map>\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n                attribution=\"&copy; <a href=&quot;http://osm.org/copyright&quot;>OpenStreetMap</a> contributors\"\n            />\n            <Confirmados />\n        </Map>\n    )\n}\n\nexport default Mapa;","import React, { Component } from \"react\";\nimport { MDBNavbar, MDBNavbarBrand, MDBNavbarNav, MDBNavItem, MDBCollapse } from \"mdbreact\";\nimport { BrowserRouter as Router } from 'react-router-dom';\n\nclass NavbarPage extends Component {\n    state = {\n        isOpen: false\n    };\n\n    toggleCollapse = () => {\n    this.setState({ isOpen: !this.state.isOpen });\n    }\n\n    render() {\n    return (\n        <Router>\n        <MDBNavbar color=\"indigo\" dark expand=\"md\">\n            <MDBNavbarBrand>\n                <strong className=\"white-text\">MAPA COVID-19</strong>\n            </MDBNavbarBrand>\n            {/* <MDBNavbarToggler onClick={this.toggleCollapse} /> */}\n            <MDBCollapse id=\"navbarCollapse3\" isOpen={this.state.isOpen} navbar>\n             <MDBNavbarNav right>\n                <MDBNavItem>\n                {/* <MDBFormInline waves>\n                    <div className=\"md-form my-0\">\n                    <input className=\"form-control mr-sm-2\" type=\"text\" placeholder=\"Buscar PaÃ­s\" aria-label=\"Search\" />\n                    </div>\n                </MDBFormInline> */}\n                </MDBNavItem>\n            </MDBNavbarNav> \n            </MDBCollapse>\n        </MDBNavbar>\n        </Router>\n        );\n    }\n}\n\nexport default NavbarPage;","import React, { Component } from 'react'\nimport { MDBCard, MDBCardText, MDBCardHeader} from \"mdbreact\";\n\nimport { textInfectados, textFallecidos ,textRecuperados } from \"./popupStyles\";\n\n\nclass Sidebar extends Component{\n\n    constructor(props){\n      super(props)\n      this.state = {\n          data: null,\n          dataIsLoad: false  \n      }\n    }\n\n    componentDidMount(){\n        fetch('https://covid19.mathdro.id/api/')\n        .then(response => response.json())\n        .then( result => {\n            this.setState({\n              data: result,\n              dataIsLoad: true\n            })\n        })    \n    }\n\n    render(){\n      return(\n        <React.Fragment>\n            <MDBCard className=\"card-body elegant-color w-100 p-1\" style={{ marginTop: \"2rem\" }}>\n                <MDBCardHeader color=\"black text-center\"> <span className=\"grey-text\">INFECTADOS</span></MDBCardHeader>\n                <MDBCardText className=\"text-center pt-3\" style={textInfectados}>\n                  {this.state.dataIsLoad && this.state.data.confirmed.value.toLocaleString()}\n                </MDBCardText>\n            </MDBCard>\n            <MDBCard className=\"card-body elegant-color w-100 p-1\" style={{ marginTop: \"2rem\" }}>\n                <MDBCardHeader color=\"black text-center\"><span className=\"grey-text\">FALLECIDOS</span></MDBCardHeader>\n                <MDBCardText className=\"text-center pt-3\" style={textFallecidos}>\n                  {this.state.dataIsLoad && this.state.data.deaths.value.toLocaleString()}\n                </MDBCardText>\n            </MDBCard>\n            <MDBCard className=\"card-body elegant-color w-100 p-1\" style={{ marginTop: \"2rem\" }}>\n                <MDBCardHeader color=\"black text-center\"><span className=\"grey-text\">RECUPERADOS</span></MDBCardHeader>\n                <MDBCardText className=\"text-center pt-3\" style={textRecuperados}>\n                  {this.state.dataIsLoad && this.state.data.recovered.value.toLocaleString()}\n                </MDBCardText>\n            </MDBCard>\n        </React.Fragment>\n      )\n    }  \n}\n\nexport default Sidebar;","import React from 'react';\nimport Mapa from './componentes/Mapa'\nimport Menu from './componentes/Menu'\nimport Sidebar from './componentes/Sidebar'\nimport '@fortawesome/fontawesome-free/css/all.min.css'; \nimport 'bootstrap-css-only/css/bootstrap.min.css'; \nimport 'mdbreact/dist/css/mdb.css';\n\nimport { MDBContainer, MDBRow, MDBCol } from \"mdbreact\";\n\nfunction App() {\n  return (\n      <React.Fragment>\n        <Menu />\n        <MDBContainer fluid>\n          <MDBRow>\n            <MDBCol xl=\"2\" lg=\"3\" md=\"5\" xs=\"12\">\n              <Sidebar />\n            </MDBCol>\n            <MDBCol xl=\"10\" lg=\"9\" md=\"7\" xs=\"12\">\n              <Mapa />\n            </MDBCol>\n          </MDBRow>\n        </MDBContainer>\n      </React.Fragment>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nimport '@fortawesome/fontawesome-free/css/all.min.css'; \nimport 'bootstrap-css-only/css/bootstrap.min.css'; \nimport 'mdbreact/dist/css/mdb.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}